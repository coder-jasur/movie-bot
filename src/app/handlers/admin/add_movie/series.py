import asyncpg
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from src.app.database.queries.movie.series import SeriesActions
from src.app.keyboards.callback_data import SeriesCD
from src.app.states.admin.movie import AddMovieSG

series_router = Router()

@series_router.callback_query(SeriesCD.filter())
async def add_series(call: CallbackQuery, callback_data: SeriesCD, state: FSMContext, pool: asyncpg.Pool):
    series_actions = SeriesActions(pool)

    await state.update_data(
        {
            "movie_type": "series"
        }
    )

    if callback_data.actions == "add_movie_media":
        await state.set_state(AddMovieSG.send_video)
        await call.message.edit_text("–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∏–ª—å–º")

    elif callback_data.actions == "add_movie_caption":
        await state.set_state(AddMovieSG.send_captions)
        await call.message.edit_text("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞")


    elif callback_data.actions == "add_movie_series":
        await state.set_state(AddMovieSG.send_movie_series)
        await call.message.edit_text("–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–ø–∏–∑–æ–¥ —Ñ–∏–ª—å–º–∞")

    elif callback_data.actions == "add_movie_season":
        await state.set_state(AddMovieSG.send_movie_season)
        await call.message.edit_text("–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–∑–æ–Ω —Ñ–∏–ª—å–º–∞")

    elif callback_data.actions == "add_movie_code":
        await state.set_state(AddMovieSG.send_movie_code)
        await call.message.edit_text("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞")

    elif callback_data.actions == "add_movie_name":
        await state.set_state(AddMovieSG.send_movie_name)
        await call.message.edit_text("–æ—Ç–ø—Ä–∞–≤–∏—Ç—å–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞")

    if callback_data.actions == "add_movie":
        data = await state.get_data()

        required_fields = {
            "movie_code": "–≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∫–æ–¥",
            "movie_name": "–≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ",
            "movie_series": "–≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç–ø–∏–∑–æ–¥",
            "movie_season": "–≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–µ–∑–æ–Ω",
            "movie_video_file_id": "–≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤–∏–¥–µ–æ",
            "movie_captions": "–≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ",
        }

        for key, message in required_fields.items():
            if key not in data or not data[key]:
                await call.answer(message)
                return

        try:
            await series_actions.add_series(
                data["movie_code"],
                data["movie_name"],
                data["movie_series"],
                data["movie_season"],
                data["movie_video_file_id"],
                data["movie_captions"],
            )
            await call.message.answer("üé¨ –§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        except Exception as e:
            print("ERROR", e)
            await call.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º.")
        finally:
            await state.clear()